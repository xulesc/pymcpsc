pyMCPSC README file
=====================

The pyMCPSC Project is a utility for performing large-scale Multi-criteria
Protein Structure Comparison (MCPSC) on a multi-core CPU with an easy to extend
API for adding and removing PSC methods. It makes use of several relevant python
tools to perform typical associated tasks.

This README file is intended primarily for people interested in working
with the source code.

This pyMCPSC package is open source software made available under generous
terms. Please see the LICENSE file for further details.

Python Requirements
===================

We currently recommend using Python 2.7, Python 3.5 or Python 3.6 as we have only 
tested with these versions of Python. Please **make sure that Python is installed 
correctly** and in the system path.

Dependencies
============

- NumPy, see http://www.numpy.org 
  This package is only used in the computationally-oriented modules.

- Matplotlib, see http://matplotlib.org
  All plots generated by the module use this library.

- Pandas, see http://pandas.pydata.org
  This package is required for loading and manipulating the results
  data used in the process of generating the consensus scores as well
  as data for ploting.

- Scikit, see http://scikit-learn.org/stable/
  This package is required for matrix operations performed during consensus
  scores calculation. It is also used to carry out the Multi-dimensional
  Scaling operations.

- Seaborn, see https://seaborn.pydata.org
  This package is required for the heatmaps.

- Dendropy, see https://www.dendropy.org
  This package is required for generating the dendrograms.

- Ete3, see http://etetoolkit.org
  This package is required for generating the phylogenetic trees.

Installation with Anaconda
==========================

First, Download and install Anaconda 4.0 (https://www.continuum.io/archives).

Python 2 users on Linux may use

    wget http://repo.continuum.io/archive/Anaconda2-4.0.0-Linux-x86_64.sh

Python 3 users on Linux may use

    wget http://repo.continuum.io/archive/Anaconda3-4.0.0-Linux-x86_64.sh

Optionally upgrade pip and setuptools
    conda upgrade pip setuptools

Then install pyMCPSC. Installation from source should be as simple as
going to the source code directory, and typing::

    python setup.py build
    python setup.py install

Installation without Anaconda
=============================

If you prefer to handle installation of all the dependencies individually,
we recommend that you follow the order mentioned below due to the somewhat
involved installation process of wxPython. You may also need admin / sudo
rights on your system depending on how you choose to install the
dependencies.

    1. Download and Install wxPython (https://www.wxpython.org/download.php) (not if using Python 3).
    2. Install NumPy using pip, easy_install or your method of choice.
    3. Install Matplotlib using pip, easy_install or your method of choice.
    4. Install Pandas using pip, easy_install or your method of choice.
    5. Install Scikit using pip, easy_install or your method of choice.
    6. Install Seaborn using pip, easy_install or your method of choice.
    7. Install Dendropy using pip, easy_install or your method of choice (not if using Python 3).
    8. Install Ete3 using pip, easy_install or your method of choice (not if using Python 3).

Then install pyMCPSC. Installation from source should be as simple as
going to the source code directory, and typing::

    python setup.py build
    python setup.py install

Check if pyMCPSC has installed correctly::

    run-pymcpsc -h

Configuring pyMCPSC and running experiments
===========================================

Preparing the dataset
---------------------

In order to run pyMCPSC the user must have protein (domain) structure files available locally on the
machine where pyMCPSC will be run. A useful script to download structure files from the PDB has been
included 'scripts/download.sh'. The script creates a directory 'pdb_files' in the CWD and
downloads the structure files into this directory. pyMCPSC includes structure files for the Chew Kedem
dataset in 'tests/chew_kedem_dataset/pdb_files'.

Preparing the ground truth file
-------------------------------

The next step is to prepare the ground truth file which provides the list of protein domain pairs to 
be included in the PSC and their SCOP/CATH classification. The ground truth file is a tab separated
value file with 4 columns: protein 1, protein 2, classification of protein 1 and classification
of protein 2. A sample ground truth file included in pyMCPSC is
'tests/chew_kedem_dataset/ground_truth_ck'. A useful script to prepare the ground truth file from a listing of domains and their
classifications is included 'scripts/prepare_ground_truth.py'. The script writes out the ground
truth file in the CWD.

Setting up the experiment
-------------------------

pyMCPSC supports several parameters to control the experiment these are as follows:

    1. DATADIR: The value should be the full path to the directory with the PDB structure files. 
    2. GTIN: The value should be the full path to the ground-truth data file. 
    3. PDBEXTN: The value should be the extension of the PDB structure files. 
    4. THREADS: The value should be the number of threads \impact is allowed to launch. 
    5. WEIGHTS: The value should be a comma separated string with weights for the PSC methods (in order - ce,fast,gralign,tmalign,usm).
    6. PROGDIR: The value should be the full path to the directory with the PSC binaries. Typically the user will not supply this value unless the PSC binaries have been compiled to some custom location.


The program parameters can be specified on the CLI.
pyMCPSC provides a set of sensible default fallback values for the optional arguments. If no value is specified for the
'Datadir', the pre-packaged 'proteus' dataset is automatically selected. If no
value is specified for 'Progdir', the default set of five PSC methods is used. If no value
is specified for the 'Gtin' and the 'proteus' dataset is used, the default ground
truth data is automatically selected. Note that if the 'proteus' dataset is not used then 
then the user 'must' provide a ground truth file for the performance benchmarking to be performed.
If no values are specified by the user pyMCPSC runs the experiment described in this
paper.

To run a MCPSC experiment with pyMCPSC create a directory, $TEST_DIR$, where the experiment 
outputs will be written. 
We refer to the location where pyMCPSC was cloned (unpacked from zip) as $CLONE\_DIR$.
Running pyMCPSC is as easy as invoking the \emph{run-pymcpsc} command with the appropriate
parameters::

    cd $TEST_DIR$
    run-pymcpsc [-h] [-e PDBEXTN] [-d DATADIR] [-g GTIN] [-t THREADS] \
    [-w WEIGHTS] [-p PROGDIR]

Results generated by pyMCPSC are placed in the 'work' and 'outdir' directories located in the current working directory (CWD), i.e. the one from where the program
is launched. Moreover, figures generated by pyMCPSC are placed in the
'figures' directory in the CWD.

Sample dataset for experiment
-----------------------------

We include in pyMCPSC the Chew-Kedem dataset and associated ground truth file 
as a test dataset. To
configure pyMCPSC to run with this dataset point pyMCPSC to run with with the
'tests/chew_kedem_dataset/pdb_files' folder (as DATADIR) and 'tests/chew_kedem_dataset/
ground_truth_ck' (as GTIN). The parameter PDBEXTN should be set as PDB. A minimal commnand for
using this dataset is listed below (INSTALL_DIR is the location where \impact was
extracted)::

    cd $TEST_DIR$
    run-pymcpsc -e pdb 
     -d $INSTALL_DIR$/pymcpsc/tests/chew_kedem_dataset/pdb_files
     -g $INSTALL_DIR$/pymcpsc/tests/chew_kedem_dataset/ground_truth_ck

Recreating the results reported in the paper
--------------------------------------------

Since the defaults chosen by
pyMCPSC will run the dataset and methods reported in this work no other values need to provided. The user 
can therefore recreate the work reported in this paper simple by executing
'run-pymcpsc' command.

Structure of the ground-truth file
==================================

The ground truth data file is expected to be a list of domain pairs with
true classification (SCOP/CATH) specified. The file is expected to contain 4
columns, separated by Tabs, in order: 1) domain name 1, 2) domain name 2, 3)
classification 1 and 4) classification 2. The domain names must correspond 
to the domain structure files that will be
read in for processing by the PSC methods. The sample ground truth file
generate for Proteus should serve as a good example of how the file this
file should be formated.

Using pyMCPSC as a library
==========================

It is entirely possible for advanced programmers to use pyMCPSC as a
library. This can be achieved by importing its modules after installation,
directly in the application script which needs it. Note that at the time of
this writing the API of the modules is not very clean and will be improved
over time to support this functionality more elegantly.

Distribution Structure
======================

- README.rst -- This file.
- LICENSE    -- What you can do with the code.
- setup.py   -- Installation file.
- pymcpsc/   -- The main code base sources.
- tests/     -- Unit test cases (Proteus).
- docs/      -- Additional documentation including results of Proteus experiments
- scripts/   -- Useful scripts for allied tasks

